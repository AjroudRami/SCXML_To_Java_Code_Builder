package stateMachine;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import java.io.*;

/**
 * Created by Rami on 08/03/2017.
 */
public class SCXMLToJava {

    private final String openInst = "{";
    private final String closeInst = "}";
    private final String packageHeader="package stateMachine;\n";
    private final String messageHeader="/**\nGenerated By SCXMLToJava class\n**/\n";
    private final String classNameHeader="public class GStateMachine extends AbstractStateMachine" + openInst + "\n";
    private final String constructorHeader="public GStateMachine()" + openInst + "\n";

    private String javaCode;

    private Document doc;

    public SCXMLToJava(File scxmlDocument) throws ParserConfigurationException, IOException, SAXException {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        this.doc = dBuilder.parse(scxmlDocument);
        this.doc.getDocumentElement().normalize();
    }

    public void generateJavaCode() throws IOException {
        String constructorBody = parseScxml(this.doc);
        this.javaCode = packageHeader + messageHeader + classNameHeader + constructorHeader + constructorBody + closeInst + closeInst;
        Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("GStateMachine.java"), "utf-8"));
        writer.write(this.javaCode);
        writer.flush();
        writer.close();
    }

    private String parseScxml(Document doc){
        String result = "super();\n";
        Node init = doc.getFirstChild();
        for(int i = 0; i < init.getChildNodes().getLength(); i++){
            if(init.getChildNodes().item(i).getNodeName().equals("state")){
                result += parseState(init.getChildNodes().item(i));
            }
        }
        result += "super.init();\n";
        return result;
    }

    private String parseState(Node stateNode){
        String result = "";
        if(stateNode.getNodeType() == Node.ELEMENT_NODE){
            Element element = (Element) stateNode;
            String id = element.getAttribute("id");
            String isInit = (element.hasAttribute("initial"))?element.getAttribute("initial"):"false";
            result += "super.stateList.add( new State().setId(\"" + id + "\").setIsInit(" + isInit +")";
            result += parseTransitions(stateNode);
            result += parseStateTags(stateNode);
            result +=");\n";
        }
        return result;
    }

    private String parseStateTags(Node stateNode) {
        String result = "";
        NodeList transitions = stateNode.getChildNodes();
        for(int i=0; i <transitions.getLength(); i++){
            Node tNode = transitions.item(i);
            if(tNode.getNodeType() == Node.ELEMENT_NODE) {
                Element e = (Element)tNode;
                if(e.getTagName().equals("onentry")){
                    String sentEvents = parseSend(e, "OnEntry");
                    result += sentEvents;
                }
                else if(e.getTagName().equals("onexit")){
                    String sentEvents = parseSend(e, "OnExit");
                    result += sentEvents;
                }
            }
        }
        return result;
    }

    private String parseSend(Element e, String methSuffix){
        String result = "";
        NodeList list = e.getElementsByTagName("send");
        for(int i =0; i < list.getLength(); i++){
            Node tNode = list.item(i);
            if(tNode.getNodeType() == Node.ELEMENT_NODE) {
                Element element = (Element)tNode;
                if(element.getTagName().equals("send")) {
                    String eventName = element.getAttribute("event");
                    result += ".add"+ methSuffix +"(new Event(\"" + eventName + "\").addCallable(new EventSender(\""+ eventName+"\", this)))";
                }
            }
        }
        return result;
    }

    private String parseTransitions(Node stateNode) {
        String result = "";
        NodeList transitions = stateNode.getChildNodes();
        for(int i=0; i <transitions.getLength(); i++){
            Node tNode = transitions.item(i);
            if(tNode.getNodeType() == Node.ELEMENT_NODE) {
                Element e = (Element)tNode;
                if(e.getTagName().equals("transition")){
                    Element tr = ((Element) transitions.item(i));
                    String target = tr.getAttribute("target");
                    String eventsTrigger = parseTransitionEventsTrigger(e);
                    String sentEvents = parseSentEvents(e);
                    result += ".addTransition(new Transition().setTo(new State(\"" + target + "\"))"
                            + eventsTrigger
                            + sentEvents +")";
                }
            }
        }
        return result;
    }

    private String parseSentEvents(Element e) {
        String result = "";
        NodeList list = e.getElementsByTagName("send");
        for(int i =0; i < list.getLength(); i++){
            Node tNode = list.item(i);
            if(tNode.getNodeType() == Node.ELEMENT_NODE) {
                Element element = (Element)tNode;
                if(element.getTagName().equals("send")) {
                    String eventName = element.getAttribute("event");
                    result += ".addTriggeredEvent(new Event(\"" + eventName + "\").addCallable(new EventSender(\""+ eventName+"\", this)))";
                }
            }
        }
        return result;
    }



    private String parseTransitionEventsTrigger(Element e){
        String[] triggers = e.getAttribute("event").split(" ");
        String result = "";
        for(int i=0; i<triggers.length; i++){
            result += ".addTriggerEvent(\""+ triggers[i] + "\")";
        }
        return result;
    }
}
