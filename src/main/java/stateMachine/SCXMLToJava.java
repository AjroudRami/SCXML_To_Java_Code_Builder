package stateMachine;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import java.io.*;

/**
 * Created by Rami on 08/03/2017.
 */
public class SCXMLToJava {

    private final String openInst = "{";
    private final String closeInst = "}";
    private final String packageHeader="package stateMachine;\n";
    private final String messageHeader="/**\nGenerated By SCXMLToJava class\n**/\n";
    private final String classNameHeader="public class AbstractStateMachine" + openInst + "\n";
    private final String constructorHeader="public AbstractStateMachine()" + openInst + "\n";

    private String javaCode;

    private Document doc;

    public SCXMLToJava(File scxmlDocument) throws ParserConfigurationException, IOException, SAXException {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        this.doc =  doc = dBuilder.parse(scxmlDocument);
        this.doc.getDocumentElement().normalize();
    }

    public void generateJavaCode() throws IOException {
        String constructorBody = parseScxml(this.doc);
        this.javaCode = packageHeader + messageHeader + classNameHeader + constructorHeader + constructorBody + closeInst + closeInst;
        Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("filename.java"), "utf-8"));
        writer.write(this.javaCode);
        writer.flush();
        writer.close();
    }

    private String parseScxml(Document doc){
        String result = "";
        Node init = doc.getFirstChild();
        for(int i = 0; i < init.getChildNodes().getLength(); i++){
            if(init.getChildNodes().item(i).getNodeName().equals("state")){
                result += parseState(init.getChildNodes().item(i));
            }
        }
        return result;
    }

    private String parseState(Node stateNode){
        String result = "";
        if(stateNode.getNodeType() == Node.ELEMENT_NODE){
            Element element = (Element) stateNode;
            String id = element.getAttribute("id");
            String isInit = (element.hasAttribute("initial"))?element.getAttribute("initial"):"false";
            result += "this.states.add( new State(" + id + "," + isInit +"));\n";
            result += parseTransitions(stateNode);
        }


        return result;
    }

    private String parseTransitions(Node stateNode) {
        String result = "";
        String currentStateId = ((Element) stateNode).getAttribute("id");
        NodeList transitions = stateNode.getChildNodes();
        System.out.println("length: " + transitions.getLength());
        for(int i=0; i <transitions.getLength(); i++){
            System.out.println(i);
            Node tNode = transitions.item(i);
            if(tNode.getNodeType() == Node.ELEMENT_NODE) {
                Element e = (Element)tNode;
                System.out.println(e.getTagName());
                if(e.getTagName().equals("transition")){
                    String target = ((Element) transitions.item(i)).getAttribute("target");
                    result += "this.transitions.add(new Transition(new State(\"" + currentStateId + "\"), new State(\"" + target + "\")));\n";
                }
            }
        }
        return result;
    }
}
